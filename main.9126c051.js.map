{"version":3,"sources":["scripts/main.js"],"names":["up","down","left","right","cell","document","querySelectorAll","startButton","querySelector","score","message","controlBtnLeft","controlBtnRight","controlBtnDown","controlBtnUp","test","scoreCount","check","gameField","restIndices","fillingField","i","row","cellField","textContent","classList","add","push","clearHTML","filter","item","undefined","map","remove","randomIndex","max","Math","floor","random","createNewCell","index","length","column","newNumbers","addEventListener","children","className","move","reverse","horizontal","y","range","copyRange","x","element","forEach","array","elemetn","unshift","notification","lose","elements","el","e","target","innerText","key"],"mappings":"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","file":"main.9126c051.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst cell = document.querySelectorAll('td');\nconst startButton = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst message = document.querySelector('.message-container');\nconst controlBtnLeft = document.querySelector('.control-left');\nconst controlBtnRight = document.querySelector('.control-right');\nconst controlBtnDown = document.querySelector('.control-down');\nconst controlBtnUp = document.querySelector('.control-up');\nconst test = document.querySelectorAll('.test');\n\n\nlet scoreCount = 0;\nlet check = 0;\nlet up;\nlet down;\nlet left;\nlet right;\n\nlet gameField = [\n  ['', '', '', ''],\n  ['', '', '', ''],\n  ['', '', '', ''],\n  ['', '', '', ''],\n];\n\nlet restIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nconst fillingField = () => {\n  let i = 0;\n\n  restIndices = [];\n\n  for (const row of gameField) {\n    for (const cellField of row) {\n      if (cellField !== '') {\n        cell[i].textContent = cellField;\n        cell[i].classList.add(`field-cell--${cellField}`);\n      } else {\n        restIndices.push(i);\n      }\n      i++;\n    }\n  }\n};\n\nconst clearHTML = () => {\n  const elements = [...cell].filter(item => item.classList[1] !== undefined);\n\n  elements.map(item => {\n    item.classList.remove(item.classList[1]);\n    item.textContent = '';\n  });\n  fillingField();\n};\n\nconst randomIndex = (max) => Math.floor(Math.random() * max);\n\nconst createNewCell = () => {\n  const index = restIndices[randomIndex(restIndices.length)];\n  const column = index % 4;\n  const row = (index - column) / 4;\n  const newNumbers = [4, 2, 2, 2, 2, 2, 2, 2, 2, 2];\n\n  gameField[row][column] = newNumbers[randomIndex(newNumbers.length)];\n  fillingField();\n};\n\nstartButton.addEventListener('click', () => {\n  gameField = [\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', ''],\n  ];\n  message.children[2].classList.add('hidden');\n  clearHTML();\n  startButton.textContent = 'Reset';\n  startButton.className = 'button restart';\n  createNewCell();\n  createNewCell();\n  fillingField();\n  scoreCount = 0;\n  score.textContent = `${scoreCount}`;\n});\n\nconst move = (reverse, horizontal) => {\n  check = 0;\n\n  for (let y = 0; y <= 3; y++) {\n    let range = [];\n    const copyRange = [];\n\n    for (let x = 0; x <= 3; x++) {\n      (horizontal)\n        ? range.push(gameField[y][x])\n          && copyRange.push(gameField[y][x])\n        : range.push(gameField[x][y])\n          && copyRange.push(gameField[x][y]);\n    };\n\n    range = range.filter(element => element !== '');\n\n    if (reverse) {\n      range = range.reverse();\n    };\n\n    range.forEach((element, index, array) => {\n      if (element === array[index + 1] && element !== '') {\n        array[index] = array[index + 1] * 2;\n        array[index + 1] = '';\n        scoreCount += array[index];\n      }\n    });\n\n    range = (reverse)\n      ? range.reverse().filter(elemetn => elemetn !== '')\n      : range.filter(elemetn => elemetn !== '');\n\n    for (let i = range.length; i < 4; i++) {\n      (reverse)\n        ? range.unshift('')\n        : range.push('');\n    }\n\n    range.forEach((element, i) => {\n      if (horizontal) {\n        gameField[y][i] = element;\n      } else {\n        gameField[i][y] = element;\n      }\n    });\n\n    range.forEach((element, index) => {\n      if (element !== copyRange[index]) {\n        check++;\n      }\n    });\n  };\n};\n\nconst notification = (lose) => {\n  if (lose) {\n    message.children[0].classList.remove('hidden');\n  }\n\n  gameField.forEach(elements => {\n    elements.forEach(element => {\n      if (element === 2048) {\n        message.children[1].classList.remove('hidden');\n      };\n    });\n  });\n};\n\ntest.forEach((el) => {\n  el.addEventListener('click', (e) => {\n    switch (`${e.target.innerText}`) {\n      case 'up': {\n        move(false, false);\n        up = (!check) ? 1 : 0;\n        break;\n      }\n\n      case 'down': {\n        move(true, false);\n        down = (!check) ? 1 : 0;\n        break;\n      }\n\n      case 'left': {\n        move(false, true);\n        left = (!check) ? 1 : 0;\n        break;\n      }\n\n      case 'right': {\n        move(true, true);\n        right = (!check) ? 1 : 0;\n        break;\n      }\n\n      default: {\n        return;\n      }\n    }\n    clearHTML();\n\n    if (check) {\n      createNewCell();\n    };\n    notification();\n\n    if (up && down && left && right) {\n      notification(true);\n    }\n    score.textContent = `${scoreCount}`;\n  }\n  );\n}\n);\n\ndocument.addEventListener('keyup', (e) => {\n\n  switch (e.key) {\n    case 'ArrowUp': {\n      move(false, false);\n      up = (!check) ? 1 : 0;\n      break;\n    }\n\n    case 'ArrowDown': {\n      move(true, false);\n      down = (!check) ? 1 : 0;\n      break;\n    }\n\n    case 'ArrowLeft': {\n      move(false, true);\n      left = (!check) ? 1 : 0;\n      break;\n    }\n\n    case 'ArrowRight': {\n      move(true, true);\n      right = (!check) ? 1 : 0;\n      break;\n    }\n\n    default: {\n      return;\n    }\n  }\n  clearHTML();\n\n  if (check) {\n    createNewCell();\n  };\n  notification();\n\n  if (up && down && left && right) {\n    notification(true);\n  }\n  score.textContent = `${scoreCount}`;\n});\n"]}